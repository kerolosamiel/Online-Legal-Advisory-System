// <auto-generated />
using System;
using ELawyer.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ELawyer.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ELawyer.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("ELawyer.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ClientRatingId")
                        .HasColumnType("int");

                    b.Property<int>("ClientType")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("NoOfLawyers")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserStatus")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ELawyer.Models.Consultation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("LawyerId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LawyerId");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("ELawyer.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ELawyer.Models.Lawyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("AverageRateing")
                        .HasColumnType("float");

                    b.Property<string>("BackCardImage")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConsultationFee")
                        .HasColumnType("int");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("FrontCardImage")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("LawyerRatingId")
                        .HasColumnType("int");

                    b.Property<string>("LinceseNumber")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("NoOfClients")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserStatus")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Lawyers");
                });

            modelBuilder.Entity("ELawyer.Models.LawyerSpecialization", b =>
                {
                    b.Property<int>("LawyerId")
                        .HasColumnType("int");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("LawyerId", "SpecializationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("LawyerSpecializations");
                });

            modelBuilder.Entity("ELawyer.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("LawyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Recievedat")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LawyerId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ELawyer.Models.Rating", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientRatingId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LawyerId")
                        .HasColumnType("int");

                    b.Property<int?>("LawyerRatingId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientRatingId");

                    b.HasIndex("LawyerId");

                    b.HasIndex("LawyerRatingId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("ELawyer.Models.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("ConsultationId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("LawyerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LawyerId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("ELawyer.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("LawyerId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ELawyer.Models.ServiceOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LawyerId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LawyerId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceOrders");
                });

            modelBuilder.Entity("ELawyer.Models.Specialization", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Deals with crimes and legal punishments, representing individuals or the state in cases involving offenses like theft, assault, or murder.",
                            Name = "Criminal Law"
                        },
                        new
                        {
                            ID = 2,
                            Description = "Focuses on business transactions, corporate governance, contracts, mergers, and regulatory compliance to ensure legal and ethical business operations.",
                            Name = "Commercial And Corporate Law"
                        },
                        new
                        {
                            ID = 3,
                            Description = "Covers workplace rights, employment disputes, social security, and insurance claims, ensuring fair treatment and compliance with labor regulations",
                            Name = "Labor And Insurance Law"
                        },
                        new
                        {
                            ID = 4,
                            Description = " Governs family matters such as marriage, divorce, child custody, and inheritance, ensuring legal protection of personal and familial rights.",
                            Name = "Personal Atatus Law"
                        },
                        new
                        {
                            ID = 5,
                            Description = "Regulates property ownership, transactions, leasing, zoning, and land disputes, ensuring legal compliance in real estate dealings.",
                            Name = "Real Estate And Property Law"
                        },
                        new
                        {
                            ID = 6,
                            Description = "Deals with regulations, government agencies, public administration, and legal disputes involving governmental decisions and policies.",
                            Name = "Administrative Law And Government Issues"
                        },
                        new
                        {
                            ID = 7,
                            Description = "Governs legal relations between nations, international treaties, trade laws, and dispute resolution through arbitration rather than litigation.",
                            Name = "International Law And Arbitration"
                        },
                        new
                        {
                            ID = 8,
                            Description = "Covers taxation regulations, compliance, tax planning, and financial advisory services to help individuals and businesses manage their fiscal responsibilities.",
                            Name = "Tax Law and Financial Consultation"
                        },
                        new
                        {
                            ID = 9,
                            Description = "Protects creations like inventions, trademarks, patents, and artistic works, ensuring exclusive rights and preventing unauthorized use.",
                            Name = "Intellectual Property And Copyright Law"
                        });
                });

            modelBuilder.Entity("ELawyer.Models.SubSpecialization", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SpecializationID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SpecializationID");

                    b.ToTable("SubSpecializations");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Defending defendants in criminal cases.",
                            SpecializationID = 1
                        },
                        new
                        {
                            ID = 2,
                            Name = "Providing advice on criminal laws and penalties",
                            SpecializationID = 1
                        },
                        new
                        {
                            ID = 3,
                            Name = "Drug-related issues, theft, murder, fraud, and cybercrimes",
                            SpecializationID = 1
                        },
                        new
                        {
                            ID = 4,
                            Name = "Filing appeals against criminal convictions",
                            SpecializationID = 1
                        },
                        new
                        {
                            ID = 5,
                            Name = "Establishing companies and preparing legal contracts",
                            SpecializationID = 2
                        },
                        new
                        {
                            ID = 6,
                            Name = "Drafting and reviewing partnership and intellectual property contracts",
                            SpecializationID = 2
                        },
                        new
                        {
                            ID = 7,
                            Name = "Bankruptcy and liquidation issues",
                            SpecializationID = 2
                        },
                        new
                        {
                            ID = 8,
                            Name = "Commercial disputes between companies or individuals",
                            SpecializationID = 2
                        },
                        new
                        {
                            ID = 9,
                            Name = "Dyeing and reviewing employment contracts",
                            SpecializationID = 3
                        },
                        new
                        {
                            ID = 10,
                            Name = "Arbitrary dismissal and employee harassment cases",
                            SpecializationID = 3
                        },
                        new
                        {
                            ID = 11,
                            Name = "Consultations on social insurance and pension laws",
                            SpecializationID = 3
                        },
                        new
                        {
                            ID = 12,
                            Name = "Labor disputes between companies and employees",
                            SpecializationID = 3
                        },
                        new
                        {
                            ID = 13,
                            Name = "Wedding, divorce and pollen gifts",
                            SpecializationID = 4
                        },
                        new
                        {
                            ID = 14,
                            Name = "Alimony and child custody",
                            SpecializationID = 4
                        },
                        new
                        {
                            ID = 15,
                            Name = "Providing inheritance according to Sharia and civil laws",
                            SpecializationID = 4
                        },
                        new
                        {
                            ID = 16,
                            Name = "Consultations regarding civil marriage and customary marriage",
                            SpecializationID = 4
                        },
                        new
                        {
                            ID = 17,
                            Name = "Drafting and reviewing sales and lease contracts",
                            SpecializationID = 5
                        },
                        new
                        {
                            ID = 18,
                            Name = "Disputes between buyers and sellers",
                            SpecializationID = 5
                        },
                        new
                        {
                            ID = 19,
                            Name = "Consultations on real estate ownership and legal registration",
                            SpecializationID = 5
                        },
                        new
                        {
                            ID = 20,
                            Name = "Disputes related to residential associations and real estate development",
                            SpecializationID = 5
                        },
                        new
                        {
                            ID = 21,
                            Name = "Issues related to dealing with government agencies",
                            SpecializationID = 6
                        },
                        new
                        {
                            ID = 22,
                            Name = "Appeals informed administrative decisions",
                            SpecializationID = 6
                        },
                        new
                        {
                            ID = 23,
                            Name = "onsultations regarding legal licenses and permits",
                            SpecializationID = 6
                        },
                        new
                        {
                            ID = 24,
                            Name = "Issues related to treaties and international relations",
                            SpecializationID = 7
                        },
                        new
                        {
                            ID = 25,
                            Name = "Legal consultations on international trade and foreign investment",
                            SpecializationID = 7
                        },
                        new
                        {
                            ID = 26,
                            Name = "International dispute resolution and commercial arbitration",
                            SpecializationID = 7
                        },
                        new
                        {
                            ID = 27,
                            Name = "Consultations on tax obligations for individuals and companies",
                            SpecializationID = 8
                        },
                        new
                        {
                            ID = 28,
                            Name = "Tax evasion issues and legal accounting procedures",
                            SpecializationID = 8
                        },
                        new
                        {
                            ID = 29,
                            Name = "Drafting and reviewing corporate tax plans",
                            SpecializationID = 8
                        },
                        new
                        {
                            ID = 30,
                            Name = "Registration and protection of patents and trademarks",
                            SpecializationID = 9
                        },
                        new
                        {
                            ID = 31,
                            Name = "Copyright and Intellectual Property Infringement Issues",
                            SpecializationID = 9
                        },
                        new
                        {
                            ID = 32,
                            Name = "Copyright Law Consultations",
                            SpecializationID = 9
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ELawyer.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("ELawyer.Models.Admin", b =>
                {
                    b.HasOne("ELawyer.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Admin")
                        .HasForeignKey("ELawyer.Models.Admin", "UserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ELawyer.Models.Client", b =>
                {
                    b.HasOne("ELawyer.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Client")
                        .HasForeignKey("ELawyer.Models.Client", "UserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ELawyer.Models.Consultation", b =>
                {
                    b.HasOne("ELawyer.Models.Client", "Client")
                        .WithMany("Consultations")
                        .HasForeignKey("ClientId");

                    b.HasOne("ELawyer.Models.Lawyer", "Lawyer")
                        .WithMany()
                        .HasForeignKey("LawyerId");

                    b.Navigation("Client");

                    b.Navigation("Lawyer");
                });

            modelBuilder.Entity("ELawyer.Models.Invoice", b =>
                {
                    b.HasOne("ELawyer.Models.Payment", "Payment")
                        .WithOne("Invoice")
                        .HasForeignKey("ELawyer.Models.Invoice", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("ELawyer.Models.Lawyer", b =>
                {
                    b.HasOne("ELawyer.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Lawyer")
                        .HasForeignKey("ELawyer.Models.Lawyer", "UserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ELawyer.Models.LawyerSpecialization", b =>
                {
                    b.HasOne("ELawyer.Models.Lawyer", "Lawyer")
                        .WithMany("LawyerSpecializations")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELawyer.Models.Specialization", "Specialization")
                        .WithMany("LawyerSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lawyer");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("ELawyer.Models.Payment", b =>
                {
                    b.HasOne("ELawyer.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELawyer.Models.Lawyer", "Lawyer")
                        .WithMany()
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Lawyer");
                });

            modelBuilder.Entity("ELawyer.Models.Rating", b =>
                {
                    b.HasOne("ELawyer.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ELawyer.Models.Client", null)
                        .WithMany("Rating")
                        .HasForeignKey("ClientRatingId");

                    b.HasOne("ELawyer.Models.Lawyer", "Lawyer")
                        .WithMany()
                        .HasForeignKey("LawyerId");

                    b.HasOne("ELawyer.Models.Lawyer", null)
                        .WithMany("Rating")
                        .HasForeignKey("LawyerRatingId");

                    b.Navigation("Client");

                    b.Navigation("Lawyer");
                });

            modelBuilder.Entity("ELawyer.Models.Response", b =>
                {
                    b.HasOne("ELawyer.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("ELawyer.Models.Lawyer", "Lawyer")
                        .WithMany()
                        .HasForeignKey("LawyerId");

                    b.Navigation("Client");

                    b.Navigation("Lawyer");
                });

            modelBuilder.Entity("ELawyer.Models.Service", b =>
                {
                    b.HasOne("ELawyer.Models.Lawyer", "Lawyer")
                        .WithMany("Services")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lawyer");
                });

            modelBuilder.Entity("ELawyer.Models.ServiceOrder", b =>
                {
                    b.HasOne("ELawyer.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELawyer.Models.Lawyer", "Lawyer")
                        .WithMany()
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELawyer.Models.Payment", "Payment")
                        .WithOne("ServiceOrder")
                        .HasForeignKey("ELawyer.Models.ServiceOrder", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELawyer.Models.Service", "Service")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Lawyer");

                    b.Navigation("Payment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ELawyer.Models.SubSpecialization", b =>
                {
                    b.HasOne("ELawyer.Models.Specialization", "Specialization")
                        .WithMany("SubSpecializations")
                        .HasForeignKey("SpecializationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELawyer.Models.Client", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("ELawyer.Models.Lawyer", b =>
                {
                    b.Navigation("LawyerSpecializations");

                    b.Navigation("Rating");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ELawyer.Models.Payment", b =>
                {
                    b.Navigation("Invoice")
                        .IsRequired();

                    b.Navigation("ServiceOrder")
                        .IsRequired();
                });

            modelBuilder.Entity("ELawyer.Models.Service", b =>
                {
                    b.Navigation("ServiceOrders");
                });

            modelBuilder.Entity("ELawyer.Models.Specialization", b =>
                {
                    b.Navigation("LawyerSpecializations");

                    b.Navigation("SubSpecializations");
                });

            modelBuilder.Entity("ELawyer.Models.ApplicationUser", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Client")
                        .IsRequired();

                    b.Navigation("Lawyer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
